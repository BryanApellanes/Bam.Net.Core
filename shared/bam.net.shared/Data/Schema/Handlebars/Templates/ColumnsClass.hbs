using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using Bam.Net.Data;

namespace {{Namespace}}
{
    public class {{Model.ClassName}}Columns: QueryFilter<{{Model.ClassName}}Columns>, IFilterToken
    {
        public {{Model.ClassName}}Columns() { }
        public {{Model.ClassName}}Columns(string columnName)
            : base(columnName)
        { }
        
        public bool IsKey()
        {
            return (bool)ColumnName?.Equals(KeyColumn.ColumnName);
        }

        private bool? _isForeignKey;
        public bool IsForeignKey
        {
            get
            {
                if (_isForeignKey == null)
                {
                    PropertyInfo[] props = DaoType.GetProperties();
                    foreach (PropertyInfo propertyInfo in props)
                    {
                        if (propertyInfo.HasCustomAttributeOfType<ForeignKeyAttribute>(out ForeignKeyAttribute foreignKeyAttribute))
                        {
                            _isForeignKey = foreignKeyAttribute.Name.Equals(ColumnName);
                            break;
                        }
                    }
                }

                return _isForeignKey.Value;
            }
        }
        
		public {{Model.ClassName}}Columns KeyColumn
		{
			get
			{
				return new {{Model.ClassName}}Columns("{{Model.Key.Name}}");
			}
		}	

{{#each NonForeignKeyColumns}}
{{> ColumnsProperty }}
{{/each}}


{{#each Model.ForeignKeys }}
{{> ColumnsProperty }}
{{/each}}

		public Type DaoType
		{
			get
			{
				return typeof({{Model.ClassName}});
			}
		}

		public string Operator { get; set; }

        public override string ToString()
        {
            return base.ColumnName;
        }
	}
}