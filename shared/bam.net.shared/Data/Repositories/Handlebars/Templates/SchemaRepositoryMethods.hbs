		
		/// <summary>
		/// Set one entry matching the specified filter.  If none exists 
		/// one is created; success depends on the nullability
		/// of the specified columns.
		/// </summary>
		public void SetOne{{Type.Name}}Where(WhereDelegate<{{Type.Name}}Columns> where)
		{
			{{DaoNamespace}}.{{Type.Name}}.SetOneWhere(where, Database);
		}

		/// <summary>
		/// Set one entry matching the specified filter.  If none exists 
		/// one is created; success depends on the nullability
		/// of the specified columns.
		/// </summary>
		public void SetOne{{Type.Name}}Where(WhereDelegate<{{Type.Name}}Columns> where, out {{{Type.FullName}}} result)
		{
			{{DaoNamespace}}.{{Type.Name}}.SetOneWhere(where, out {{DaoNamespace}}.{{Type.Name}} daoResult, Database);
			result = daoResult.CopyAs<{{{Type.FullName}}}>();
		}

		/// <summary>
		/// Get one entry matching the specified filter.  If none exists 
		/// one is created; success depends on the nullability
		/// of the specified columns.
		/// </summary>
		/// <param name="where"></param>
		public {{{Type.FullName}}} GetOne{{Type.Name}}Where(WhereDelegate<{{Type.Name}}Columns> where)
		{
			Type wrapperType = GetWrapperType<{{{Type.FullName}}}>();
			return ({{{Type.FullName}}}){{DaoNamespace}}.{{Type.Name}}.GetOneWhere(where, Database)?.CopyAs(wrapperType, this);
		}

		/// <summary>
		/// Execute a query that should return only one result.  If no result is found null is returned.  If more
		/// than one result is returned a MultipleEntriesFoundException is thrown.  This method is most commonly used to retrieve a
		/// single {{Type.Name}} instance by its Id/Key value
		/// </summary>
		/// <param name="where">A WhereDelegate that receives a {{Type.Name}}Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between {{Type.Name}}Columns and other values
		/// </param>
		public {{{Type.FullName}}} One{{Type.Name}}Where(WhereDelegate<{{Type.Name}}Columns> where)
        {
            Type wrapperType = GetWrapperType<{{{Type.FullName}}}>();
            return ({{{Type.FullName}}}){{DaoNamespace}}.{{Type.Name}}.OneWhere(where, Database)?.CopyAs(wrapperType, this);
        }

		/// <summary>
		/// Execute a query and return the results. 
		/// </summary>
		/// <param name="where">A WhereDelegate that receives a {{{Type.FullName}}}Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between {{{Type.FullName}}}Columns and other values
		/// </param>
		public IEnumerable<{{{Type.FullName}}}> {{TypeNamePluralized}}Where(WhereDelegate<{{Type.Name}}Columns> where, OrderBy<{{Type.Name}}Columns> orderBy = null)
        {
            return Wrap<{{{Type.FullName}}}>({{DaoNamespace}}.{{Type.Name}}.Where(where, orderBy, Database));
        }
		
		/// <summary>
		/// Execute a query and return the specified number
		/// of values. This method issues a sql TOP clause so only the 
		/// specified number of values will be returned.
		/// </summary>
		/// <param name="count">The number of values to return.
		/// This value is used in the sql query so no more than this 
		/// number of values will be returned by the database.
		/// </param>
		/// <param name="where">A WhereDelegate that receives a {{Type.Name}}Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between {{Type.Name}}Columns and other values
		/// </param>
		public IEnumerable<{{{Type.FullName}}}> Top{{TypeNamePluralized}}Where(int count, WhereDelegate<{{Type.Name}}Columns> where)
        {
            return Wrap<{{{Type.FullName}}}>({{DaoNamespace}}.{{Type.Name}}.Top(count, where, Database));
        }

        public IEnumerable<{{{Type.FullName}}}> Top{{TypeNamePluralized}}Where(int count, WhereDelegate<{{Type.Name}}Columns> where, OrderBy<{{Type.Name}}Columns> orderBy)
        {
            return Wrap<{{{Type.FullName}}}>({{DaoNamespace}}.{{Type.Name}}.Top(count, where, orderBy, Database));
        }
                                
		/// <summary>
		/// Return the count of {{TypeNamePluralized}}
		/// </summary>
		public long Count{{TypeNamePluralized}}()
        {
            return {{DaoNamespace}}.{{Type.Name}}.Count(Database);
        }

		/// <summary>
		/// Execute a query and return the number of results
		/// </summary>
		/// <param name="where">A WhereDelegate that receives a {{Type.Name}}Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between {{Type.Name}}Columns and other values
		/// </param>
        public long Count{{TypeNamePluralized}}Where(WhereDelegate<{{Type.Name}}Columns> where)
        {
            return {{DaoNamespace}}.{{Type.Name}}.Count(where, Database);
        }
        
        public async Task BatchQuery{{TypeNamePluralized}}(int batchSize, WhereDelegate<{{Type.Name}}Columns> where, Action<IEnumerable<{{{Type.FullName}}}>> batchProcessor)
        {
            await {{DaoNamespace}}.{{Type.Name}}.BatchQuery(batchSize, where, (batch) =>
            {
				batchProcessor(Wrap<{{{Type.FullName}}}>(batch));
            }, Database);
        }
		
        public async Task BatchAll{{TypeNamePluralized}}(int batchSize, Action<IEnumerable<{{{Type.FullName}}}>> batchProcessor)
        {
            await {{DaoNamespace}}.{{Type.Name}}.BatchAll(batchSize, (batch) =>
            {
				batchProcessor(Wrap<{{{Type.FullName}}}>(batch));
            }, Database);
        }

