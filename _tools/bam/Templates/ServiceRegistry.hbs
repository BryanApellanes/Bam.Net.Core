using System;
using Bam.Net.Automation;
using Bam.Net.CoreServices;
using Bam.Net.Services;
using Bam.Net.Services.Automation;

namespace {{Namespace}}
{
    [ServiceRegistryContainer]
    public class {{ApplicationName}}ServiceRegistry : ApplicationServiceRegistry
    {
        public const string ApplicationName = "{{ApplicationName}}";

        public static ApplicationServiceRegistry ForCurrentProcessMode()
        {
            ProcessModes current = ProcessMode.Current.Mode;
            MethodInfo creator = typeof({{ApplicationName}}ServiceRegistry).GetMethods().FirstOrDefault(m =>
            {
                if (m.HasCustomAttributeOfType<ServiceRegistryLoaderAttribute>(out ServiceRegistryLoaderAttribute attr))
                {
                    return attr.ProcessModes.Contains(current);
                }

                return false;
            });

            if (creator != null)
            {
                return (ApplicationServiceRegistry)creator.Invoke(null, null);
            }

            return Dev();
        }

        [ServiceRegistryLoader(ApplicationName, ProcessModes.Dev)]
        public static ApplicationServiceRegistry Dev(Action<ApplicationServiceRegistry> configure = null)
        {
            // customize for Dev
            return Create(configure);
        }

        [ServiceRegistryLoader(ApplicationName, ProcessModes.Test)]
        public static ApplicationServiceRegistry Test(Action<ApplicationServiceRegistry> configure = null)
        {
            // customize for Test
            return Create(configure);
        }

        [ServiceRegistryLoader(ApplicationName, ProcessModes.Prod)]
        public static ApplicationServiceRegistry Prod(Action<ApplicationServiceRegistry> configure = null)
        {
            // customize for Prod
            return Create(configure); 
        }
        
        public static ApplicationServiceRegistry Create(Action<ApplicationServiceRegistry> configure = null)
        {
            ApplicationServiceRegistry result = ForProcess(appSvcReg =>
            {
                appSvcReg.For<CommandService>().Use<CommandService>();                
            });
            configure?.Invoke(result);
            return result;
        }
    }
}